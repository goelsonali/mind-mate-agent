# Set a longer timeout for the build (30 minutes)
timeout: 1800s

# Substitution variables with defaults
substitutions:
  _DEPLOY_FRONTEND: 'true'
  _DEPLOY_BACKEND: 'true'
  _REGION: 'europe-west2'
  # These will be provided by GitHub Actions from repository secrets
  _GOOGLE_CLIENT_ID: ''
  _GOOGLE_CLIENT_SECRET: ''
  _JWT_SECRET: ''
  _GOOGLE_APPLICATION_CREDENTIALS_JSON_B64: ''
  _FIREBASE_CREDENTIALS_JSON_B64: ''
  _GEMINI_API_KEY: ''

# Enable explicit logging
options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Log build start for debugging
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args: ['-c', 'echo "Starting Mind Mate build process for static-concept-459810-q7"']
  
  # Verify region is set
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'verify-region'
    waitFor: ['-']
    script: |
      # Ensure region is set
      if [ -z "$_REGION" ]; then
        echo "ERROR: Region not specified. Setting to default europe-west2"
        export _REGION="europe-west2"
      fi
      echo "Using region: $_REGION"
      gcloud config set run/region $_REGION

  # Frontend deployment
  # Build the frontend container image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    waitFor: ['verify-region']
    # Skip if _DEPLOY_FRONTEND is false
    env:
      - '_DEPLOY_FRONTEND=$_DEPLOY_FRONTEND'
    script: |
      if [ "$_DEPLOY_FRONTEND" = "false" ]; then
        echo "Skipping frontend build as _DEPLOY_FRONTEND=$_DEPLOY_FRONTEND"
        exit 0
      fi
      docker build \
        -t europe-west2-docker.pkg.dev/static-concept-459810-q7/mindmate/frontend:latest \
        --build-arg VITE_API_URL=https://mindmate-backend-6xntrakg7q-nw.a.run.app \
        --build-arg VITE_APP_ENV=production \
        --build-arg VITE_ENABLE_ANALYTICS=true \
        --build-arg VITE_GEMINI_API_KEY=${_GEMINI_API_KEY} \
        -f ./app/frontend/Dockerfile \
        ./app/frontend

  # Push the frontend container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    waitFor: ['build-frontend']
    # Only run if _DEPLOY_FRONTEND is true
    env:
      - '_DEPLOY_FRONTEND=$_DEPLOY_FRONTEND'
    script: |
      if [ "$_DEPLOY_FRONTEND" = "false" ]; then
        echo "Skipping frontend push as _DEPLOY_FRONTEND=$_DEPLOY_FRONTEND"
        exit 0
      fi
      docker push europe-west2-docker.pkg.dev/static-concept-459810-q7/mindmate/frontend:latest
  
  # Deploy frontend container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-frontend'
    waitFor: ['push-frontend']
    # Only run if _DEPLOY_FRONTEND is true
    env:
      - '_DEPLOY_FRONTEND=$_DEPLOY_FRONTEND'
    script: |
      if [ "$_DEPLOY_FRONTEND" = "false" ]; then
        echo "Skipping frontend deployment as _DEPLOY_FRONTEND=$_DEPLOY_FRONTEND"
        exit 0
      fi
      gcloud run deploy mindmate-frontend \
        --image europe-west2-docker.pkg.dev/static-concept-459810-q7/mindmate/frontend:latest \
        --platform managed \
        --allow-unauthenticated

  # Backend deployment
  # Build the backend container image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    waitFor: ['-']
    # Only run if _DEPLOY_BACKEND is true
    env:
      - '_DEPLOY_BACKEND=$_DEPLOY_BACKEND'
    script: |
      if [ "$_DEPLOY_BACKEND" = "false" ]; then
        echo "Skipping backend build as _DEPLOY_BACKEND=$_DEPLOY_BACKEND"
        exit 0
      fi
      docker build -t europe-west2-docker.pkg.dev/static-concept-459810-q7/mindmate/backend:latest -f ./app/backend/Dockerfile ./app/backend
  
  # Push the backend container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    waitFor: ['build-backend']
    # Only run if _DEPLOY_BACKEND is true
    env:
      - '_DEPLOY_BACKEND=$_DEPLOY_BACKEND'
    script: |
      if [ "$_DEPLOY_BACKEND" = "false" ]; then
        echo "Skipping backend push as _DEPLOY_BACKEND=$_DEPLOY_BACKEND"
        exit 0
      fi
      docker push europe-west2-docker.pkg.dev/static-concept-459810-q7/mindmate/backend:latest
  
  # Deploy backend container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-backend'
    waitFor: ['push-backend']
    # Only run if _DEPLOY_BACKEND is true
    env:
      - '_DEPLOY_BACKEND=$_DEPLOY_BACKEND'
    script: |
      if [ "$_DEPLOY_BACKEND" = "false" ]; then
        echo "Skipping backend deployment as _DEPLOY_BACKEND=$_DEPLOY_BACKEND"
        exit 0
      fi
      
      # Create temporary files for the decoded credentials
      echo "${_GOOGLE_APPLICATION_CREDENTIALS_JSON_B64}" | base64 -d > /tmp/google_creds.json
      echo "${_FIREBASE_CREDENTIALS_JSON_B64}" | base64 -d > /tmp/firebase_creds.json
      
      # Read the files with proper escaping for environment variables
      GOOGLE_CREDS=$(cat /tmp/google_creds.json | tr '\n' ' ' | sed 's/"/\\\"/g')
      FIREBASE_CREDS=$(cat /tmp/firebase_creds.json | tr '\n' ' ' | sed 's/"/\\\"/g')
      
      # Remove temporary files
      rm /tmp/google_creds.json /tmp/firebase_creds.json
      
      # Deploy with environment variables
      gcloud run deploy mindmate-backend \
        --image europe-west2-docker.pkg.dev/static-concept-459810-q7/mindmate/backend:latest \
        --platform managed \
        --memory 1Gi \
        --set-env-vars GOOGLE_CLIENT_ID="${_GOOGLE_CLIENT_ID}",GOOGLE_CLIENT_SECRET="${_GOOGLE_CLIENT_SECRET}",JWT_SECRET="${_JWT_SECRET}",GEMINI_API_KEY="${_GEMINI_API_KEY}",FRONTEND_URL="https://mindmate-frontend-6xntrakg7q-nw.a.run.app",REDIRECT_URI="https://mindmate-backend-6xntrakg7q-nw.a.run.app/auth/google/callback" \
        --allow-unauthenticated
      
      # Create Secret Manager secrets for the JSON credentials if they don't exist
      if ! gcloud secrets describe google-application-credentials --project static-concept-459810-q7 &>/dev/null; then
        echo "Creating Google Application Credentials secret"
        echo "${_GOOGLE_APPLICATION_CREDENTIALS_B64}" | base64 -d | gcloud secrets create google-application-credentials --data-file=- --project static-concept-459810-q7
      else
        echo "Updating Google Application Credentials secret"
        echo "${_GOOGLE_APPLICATION_CREDENTIALS_B64}" | base64 -d | gcloud secrets versions add google-application-credentials --data-file=- --project static-concept-459810-q7
      fi
      
      if ! gcloud secrets describe firebase-credentials --project static-concept-459810-q7 &>/dev/null; then
        echo "Creating Firebase Credentials secret"
        echo "${_FIREBASE_CREDENTIALS_JSON_B64}" | base64 -d | gcloud secrets create firebase-credentials --data-file=- --project static-concept-459810-q7
      else
        echo "Updating Firebase Credentials secret"
        echo "${_FIREBASE_CREDENTIALS_JSON_B64}" | base64 -d | gcloud secrets versions add firebase-credentials --data-file=- --project static-concept-459810-q7
      fi
      
      # Update the Cloud Run service to use the secrets
      gcloud run services update mindmate-backend \
        --add-secret=GOOGLE_APPLICATION_CREDENTIALS_JSON=google-application-credentials:latest \
        --add-secret=FIREBASE_CREDENTIALS_JSON=firebase-credentials:latest

images:
  - 'europe-west2-docker.pkg.dev/static-concept-459810-q7/mindmate/frontend:latest'
  - 'europe-west2-docker.pkg.dev/static-concept-459810-q7/mindmate/backend:latest'
